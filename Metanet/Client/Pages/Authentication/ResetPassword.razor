@page "/reset";
@using Microsoft.AspNetCore.WebUtilities;  
@using Microsoft.Extensions.Primitives;  
@inject IAuthenticationService authService;
@inject NavigationManager navigation;
@inject Sotsera.Blazor.Toaster.IToaster Toaster
<section>
    @if(!string.IsNullOrEmpty(model.UserId) && !string.IsNullOrEmpty(model.Token)){
        <div class = "container-fluid default-bg pt-120">
    <div class = "row d-flex justify-content-center align-items-center min-vh-100">
        <div class = "col-md-6">
           
            <div class = "card text-center py-2">
                <h2>Новый пароль</h2>
                

                <div class = "card-body">
            <EditForm Model="model" OnValidSubmit = "ResetPasswordByToken">
            <DataAnnotationsValidator />
    
          

          <div class="form-group my-2">
                <label for="exampleInputEmail1">Новый Пароль *</label> 
                  <InputText @bind-Value="model.Password" class="form-control" type="password" />
                  <ValidationMessage For="(()=>model.Password)" />
           </div>

           <div class="form-group my-2">
                <label for="exampleInputEmail1">Повторите пароль *</label> 
                  <InputText @bind-Value="model.ConfirmPassword" class="form-control" type="password" />
                  <ValidationMessage For="(()=>model.ConfirmPassword)" />
           </div>

          
             <div class = "text-center">
                        @if (process)
                        {
                            <Loading></Loading>
                        }
                        else
                        {
                             <button type ="submit" class = "btn btn-info">Восстановить</button>
                        }
                      
                </div>
                </EditForm>
                </div>
                <div class="card-text">
                    <NavLink href="/login">Вход</NavLink>
                </div>
                
             </div>
             
             
        </div>
    </div>

</div>
    }
    else{
        <Loader loader=true></Loader>
    }

</section>

@code {
    ResetDTO model = new ResetDTO();
    bool process = false;

    protected override async Task OnInitializedAsync()
	{
      setterParam();

	}
   
    protected override void OnParametersSet()
    {
         setterParam();
    }

    void setterParam(){
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);

        if (queryStrings.TryGetValue("token", out var token))
        {
            model.Token = token;

        }
        if (queryStrings.TryGetValue("identify", out var identify))
        {
            model.UserId = identify;
        }
        if(string.IsNullOrEmpty(model.Token) || string.IsNullOrEmpty(model.UserId))
        {
            Toaster.Warning("Неверный запрос");
            navigation.NavigateTo("/");
        }
    }

    public  async Task  ResetPasswordByToken()
    {
        process = true;
        var result = await authService.ResetPassword(model);
        process = false;
        if (result.Success)
        {
            navigation.NavigateTo("/login");
        }
    }


}
